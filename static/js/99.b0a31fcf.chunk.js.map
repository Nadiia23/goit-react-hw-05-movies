{"version":3,"file":"static/js/99.b0a31fcf.chunk.js","mappings":"qSAEMA,E,MAASC,GAAAA,OAAa,CACxBC,QAAS,+BACTC,OAAQ,CACJC,QAAS,sCAIJC,EAAW,mCAAG,sGACAL,EAAOM,IAAI,uBADX,uBACfC,EADe,EACfA,KADe,kBAGhBA,EAAKC,SAHW,2CAAH,qDAMXC,EAAW,mCAAG,WAAMC,GAAN,uFACAV,EAAOM,IAAP,iBAAqBI,IADrB,cACjBC,EADiB,yBAGhBA,EAASJ,MAHO,2CAAH,sDAMXK,EAAgB,mCAAG,WAAMT,GAAN,yFACPH,EAAOM,IAAI,gBAAiB,CAAEH,OAAQA,IAD/B,uBACtBI,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,sDAYhBM,EAAa,mCAAG,WAAMH,GAAN,yFACJV,EAAOM,IAAP,iBAAqBI,EAArB,aADI,uBACnBH,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKbO,EAAgB,mCAAG,WAAMJ,GAAN,yFACLV,EAAOM,IAAP,iBAAqBI,EAArB,aADK,uBACpBH,EADoB,EACpBA,KACRQ,QAAQC,IAAIT,GAFgB,kBAGvBA,GAHuB,2CAAH,qD,qICrC7B,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA2E,mB,SC2C3E,EAtCa,WACT,OAAkCU,EAAAA,EAAAA,YAAlC,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWJ,OATJE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAa,mCAAG,qGACCV,EAAAA,EAAAA,IAAcO,GADf,OACZb,EADY,OAElBY,EAAaZ,EAAKiB,MAFA,2CAAH,qDAInBD,GACH,GAAE,CAACH,KAIJ,8BACGF,IACC,eAAIO,UAAWC,EAAf,gBACGR,QADH,IACGA,OADH,EACGA,EAAWS,KAAI,gBAAGjB,EAAH,EAAGA,GAAIkB,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAArB,OACd,gBAAaJ,UAAWC,EAAxB,WACE,gBACEI,IACEF,EAAY,yCAC0BA,GAClC,uFAENG,IAAKF,EACLG,MAAM,SAER,cAAGP,UAAWC,EAAd,SAAuBG,MAVhBnB,EADK,OAmBzB,C","sources":["helpers/api.js","webpack://react-homework-template/./src/pages/Cast/cast.module.css?3847","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst getApi = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: 'c7319c856c6453f29ecfc93fd160b989'\n    },\n});\n\nexport const getTrending = async () => {\n    const { data } = await getApi.get('/trending/movie/day');\n    // console.log(data.results);\n    return data.results;\n};\n\nexport const getMoviesId = async id => { \n    const response = await getApi.get(`/movie/${id}`);\n    // console.log(response.data);\n    return response.data;\n}\n\nexport const getMoviesByQuery = async params => {\n  const { data } = await getApi.get('/search/movie', { params: params });\n  return data;\n};\n\n// export const getMoviesCast= async id => { \n//     const response = await getApi.get(`/movie/${id}/credits`);\n//     console.log(response.data);\n//     return response.data;\n// }\n\n\nexport const getMoviesCast = async id => {\n  const { data } = await getApi.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMoviesReviews = async id => {\n    const { data } = await getApi.get(`/movie/${id}/reviews`);\n    console.log(data);\n  return data;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"cast_text__UlQf6\",\"item\":\"cast_item__rFGCo\",\"list\":\"cast_list__BjE1s\"};","import React, { useState, useEffect } from \"react\";\nimport { getMoviesCast } from '../../helpers/api';\nimport { useParams } from \"react-router-dom\";\nimport s from './cast.module.css';\n\n\nconst Cast = () => {\n    const [castMovie, setMovieCast] = useState();\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const getCastMovies = async () => {\n            const data = await getMoviesCast(movieId);\n            setMovieCast(data.cast);\n        };\n        getCastMovies();\n    }, [movieId]);\n\n\n        return (\n    <>\n      {castMovie && (\n        <ul className={s.list}>\n          {castMovie?.map(({ id, profile_path, name }) => (\n            <li key={id} className={s.item}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : 'https://upload.wikimedia.org/wikipedia/commons/b/ba/No_image_available_400_x_600.svg'\n                }\n                alt={name}\n                width=\"100\"\n              />\n              <p className={s.text}>{name}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n\n}\n\nexport default Cast;"],"names":["getApi","axios","baseURL","params","api_key","getTrending","get","data","results","getMoviesId","id","response","getMoviesByQuery","getMoviesCast","getMoviesReviews","console","log","useState","castMovie","setMovieCast","movieId","useParams","useEffect","getCastMovies","cast","className","s","map","profile_path","name","src","alt","width"],"sourceRoot":""}